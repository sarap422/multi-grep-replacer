{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "app_info": {
    "name": "JavaScript Modernization Template",
    "version": "1.0.0",
    "created_at": "2025-08-18T10:00:00Z",
    "description": "Modernize JavaScript code with ES6+ features and best practices",
    "author": "Multi Grep Replacer Team",
    "tags": ["javascript", "es6", "modernization", "refactoring", "best-practices"]
  },
  "replacements": [
    {
      "id": "var_to_const",
      "from": "var ",
      "to": "const ",
      "enabled": true,
      "description": "Replace var with const for immutable variables",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "function_to_arrow_simple",
      "from": "function(",
      "to": "(",
      "enabled": false,
      "description": "Consider converting to arrow functions (manual review needed)",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "anonymous_function_to_arrow",
      "from": "function() {",
      "to": "() => {",
      "enabled": true,
      "description": "Convert anonymous functions to arrow functions",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "string_concatenation_to_template",
      "from": "console.log('Hello ' + name + '!');",
      "to": "console.log(`Hello ${name}!`);",
      "enabled": false,
      "description": "Example: Convert string concatenation to template literals",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "strict_mode_addition",
      "from": "(function() {",
      "to": "(function() {\n  'use strict';",
      "enabled": false,
      "description": "Add strict mode to IIFEs (review needed)",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "jquery_each_to_foreach",
      "from": "$.each(",
      "to": ".forEach(",
      "enabled": true,
      "description": "Replace jQuery each with native forEach",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "jquery_map_to_map",
      "from": "$.map(",
      "to": ".map(",
      "enabled": true,
      "description": "Replace jQuery map with native map",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "jquery_filter_to_filter",
      "from": "$.grep(",
      "to": ".filter(",
      "enabled": true,
      "description": "Replace jQuery grep with native filter",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "document_getelementbyid_modernize",
      "from": "document.getElementById(",
      "to": "document.querySelector('#",
      "enabled": false,
      "description": "Consider using querySelector for consistency",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "null_check_modernize",
      "from": "!= null",
      "to": "!== null",
      "enabled": true,
      "description": "Use strict inequality for null checks",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "undefined_check_modernize",
      "from": "!= undefined",
      "to": "!== undefined",
      "enabled": true,
      "description": "Use strict inequality for undefined checks",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "equality_strict",
      "from": "==",
      "to": "===",
      "enabled": false,
      "description": "Convert to strict equality (review needed - may affect logic)",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "promise_then_to_async_await_example",
      "from": ".then(function(response) {",
      "to": "// Consider converting to async/await pattern",
      "enabled": false,
      "description": "Flag promise chains for potential async/await conversion",
      "case_sensitive": true,
      "whole_word": false
    },
    {
      "id": "console_log_removal",
      "from": "console.log(",
      "to": "// console.log(",
      "enabled": false,
      "description": "Comment out console.log statements for production",
      "case_sensitive": true,
      "whole_word": false
    }
  ],
  "target_settings": {
    "file_extensions": [".js", ".jsx", ".ts", ".tsx", ".mjs"],
    "exclude_patterns": [
      "node_modules/**",
      ".git/**",
      "dist/**",
      "build/**",
      "public/**",
      "*.min.js",
      "vendor/**",
      "bower_components/**",
      "*.bundle.js",
      "*.test.js",
      "*.spec.js"
    ],
    "include_subdirectories": true,
    "max_file_size": 10485760,
    "encoding": "utf-8"
  },
  "replacement_settings": {
    "case_sensitive": true,
    "use_regex": false,
    "backup_enabled": true,
    "preserve_file_permissions": true,
    "dry_run": true
  },
  "ui_settings": {
    "theme": "auto",
    "window": {
      "width": 800,
      "height": 700,
      "resizable": true,
      "center": true
    },
    "remember_last_folder": true,
    "auto_save_config": false,
    "show_file_count_preview": true,
    "confirm_before_execution": true
  },
  "advanced_settings": {
    "max_concurrent_files": 10,
    "progress_update_interval": 100,
    "log_level": "info",
    "enable_crash_reporting": false
  }
}